import discord
import asyncio
import aiohttp
import random
import json
import logging
from discord.ext import commands
from discord import app_commands


# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", filename="bot.log", filemode="a")

# === –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö ===
CONFIG_FILE = "config.json"

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON."""
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.warning("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        return {
            "DISCORD_TOKEN": "",
            "IMGUR_CLIENT_ID": "",
            "CHANNELS": [],
            "SEND_INTERVAL": 60,
            "SEARCH_TOPIC": "memes"
        }

def save_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON."""
    with open(CONFIG_FILE, "w", encoding="utf-8") as file:
        json.dump(config, file, indent=4, ensure_ascii=False)

config = load_config()

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
DISCORD_TOKEN = config["DISCORD_TOKEN"]
IMGUR_CLIENT_ID = config["IMGUR_CLIENT_ID"]
CHANNELS = config["CHANNELS"]
SEND_INTERVAL = config["SEND_INTERVAL"]
SEARCH_TOPIC = config["SEARCH_TOPIC"]
SENT_IMAGES = set()  # –ö—ç—à —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ö–≠–®–ï–ú ===
def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞."""
    global SENT_IMAGES
    try:
        with open("sent_images.json", "r", encoding="utf-8") as file:
            SENT_IMAGES = set(json.load(file))
    except (FileNotFoundError, json.JSONDecodeError):
        SENT_IMAGES = set()

def save_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Ñ–∞–π–ª."""
    with open("sent_images.json", "w", encoding="utf-8") as file:
        json.dump(list(SENT_IMAGES), file, indent=4)

load_cache()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
intents = discord.Intents.default()
intents.message_content = True  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
intents.presences = True  # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
intents.members = True  # –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞

bot = commands.Bot(command_prefix="!", intents=intents)

# === –§–£–ù–ö–¶–ò–ò ===
async def get_imgur_image():
    """–ò—â–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ —Ç–µ–≥—É –≤ Imgur API."""
    url = f"https://api.imgur.com/3/gallery/search/?q={SEARCH_TOPIC}"
    headers = {"Authorization": f"Client-ID {IMGUR_CLIENT_ID}"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                images = [item["link"] for item in data["data"] if "link" in item and item["link"].startswith("https")]

                available_images = list(set(images) - SENT_IMAGES)
                if available_images:
                    image = random.choice(available_images)
                    SENT_IMAGES.add(image)
                    return image
                return random.choice(images) if images else None
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Imgur: {response.status}")
                return None

async def send_funny_images():
    """–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–æ–≤."""
    await bot.wait_until_ready()

    while not bot.is_closed():
        for channel_id in CHANNELS:
            channel = bot.get_channel(channel_id)
            if channel:
                image_url = await get_imgur_image()
                if image_url:
                    await channel.send(image_url)
                else:
                    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.")
        await asyncio.sleep(SEND_INTERVAL)

# === –ö–û–ú–ê–ù–î–´ ===

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", color=discord.Color.blue())
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫", inline=False)
    embed.add_field(name="/mem", value="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º", inline=False)
    embed.add_field(name="/set_topic [—Ç–µ–º–∞]", value="–ú–µ–Ω—è–µ—Ç —Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –º–µ–º–æ–≤", inline=False)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.command(name="set_topic")
async def set_topic(ctx, *, topic: str):
    """–ó–∞–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    global SEARCH_TOPIC
    SEARCH_TOPIC = topic
    config["SEARCH_TOPIC"] = topic
    save_config()
    await ctx.send(f"üîç –¢–µ–º–∞—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{topic}**")

@bot.command(name="set_interval")
async def set_interval(ctx, seconds: int):
    """–ó–∞–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    global SEND_INTERVAL
    if seconds < 10:
        await ctx.send("‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥!")
        return
    SEND_INTERVAL = seconds
    config["SEND_INTERVAL"] = seconds
    save_config()
    await ctx.send(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{seconds}** —Å–µ–∫—É–Ω–¥.")

@bot.command(name="show_topic")
async def show_topic(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—ã–Ω–µ—à–Ω—é—é —Ç–µ–º—É."""
    await ctx.send(f"üîç –ù—ã–Ω–µ—à–Ω—è—è —Ç–µ–º–∞: **{SEARCH_TOPIC}**")

@bot.command(name="show_interval")
async def show_interval(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª."""
    await ctx.send(f"‚è∞ –°–µ–π—á–∞—Å –∑–∞–¥–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: **{SEND_INTERVAL}** —Å–µ–∫—É–Ω–¥")

@bot.command(name="send_mem")
async def send_mem(ctx):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
    image_url = await get_imgur_image()
    if image_url:
        await ctx.send(f"–í–æ—Ç —Ç–µ–±–µ –º–µ–º:\n{image_url}")
    else:
        await ctx.send("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–º.")

@bot.event
async def on_ready():
    logging.info(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        logging.info(f"üìå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    bot.loop.create_task(send_funny_images())

bot.run(DISCORD_TOKEN)